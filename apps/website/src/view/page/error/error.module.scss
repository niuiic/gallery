@use 'sass:math';
@use '@/style/tool/function' as *;

$size: 400px;
$step: 3;
$duration: 3s;

/* # wrapper */
.error {
  display: flex;
  align-items: center;
  width: 100%;
  height: 100%;
}

.wrapper {
  margin-left: $size;
  transform: rotateX(15deg) rotateY(15deg);
  transform-style: preserve-3d;
}

/* # box */
@keyframes rotate {
  @for $i from 1 through $step {
    $start: math.div(1, $step) * 100% * ($i - 1);
    $end: math.div(1, $step) * 100% * $i;

    #{$start} {
      left: ($i - 1) * $size;
      transform: rotateZ(0);
    }

    #{($end - $start) * 0.8 + $start} {
      transform: rotateZ(90deg);
    }

    #{($end - $start) * 0.85 + $start} {
      transform: rotateZ(88deg);
    }

    #{($end - $start) * 0.9 + $start} {
      transform: rotateZ(90deg);
    }

    #{($end - $start) * 0.999 + $start} {
      left: ($i - 1) * $size;
      transform: rotateZ(90deg);
    }

    #{$end} {
      left: $i * $size;
      transform: rotateZ(90deg);
    }
  }
}

.box {
  position: relative;
  width: $size;
  height: $size;
  transform-style: preserve-3d;
  transform-origin: 100% 100%;
  animation: rotate #{$duration * $step} cubic-bezier(1, 0.05, 0.98, 1) infinite;
}

/* # side */
.side {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 1px solid black;
  color: get-css-var(error, color);
  box-shadow: 0 0 50px 0 get-css-var(error, box-shadow-color);
  font-size: 240px;
  line-height: $size;
  text-align: center;

  &::before {
    content: '';
    display: inline-block;
  }
}

/* ## front side */
.side:nth-child(1) {
  transform: translateZ(math.div($size, 2));
}

/* ## top side */
@keyframes top {
  @for $i from 0 through $step {
    #{math.div(1, $step) * $i * 100%} {
      @if $i == 0 {
        content: '0';
      } @else if $i == 1 {
        content: '4';
      } @else {
        content: '';
      }
    }
  }
}

.side:nth-child(2) {
  transform: rotateX(90deg) translateZ(math.div($size, 2));

  &::before {
    transform: rotateZ(180deg) rotateY(180deg);
    animation: top #{$duration * $step} steps(1) infinite;
  }
}

/* ## back side */
.side:nth-child(3) {
  transform: rotateX(180deg) translateZ(math.div($size, 2));
}

/* ## bottom side */
@keyframes bottom {
  @for $i from 0 through $step {
    #{math.div(1, $step) * $i * 100%} {
      @if $i == 0 {
        content: '';
      } @else if $i == 1 {
        content: '4';
      } @else {
        content: '0';
      }
    }
  }
}

.side:nth-child(4) {
  transform: rotateX(270deg) translateZ(math.div($size, 2));

  &::before {
    transform: rotateY(180deg);
    animation: bottom #{$duration * $step} steps(1) infinite;
  }
}

/* ## right side */
@keyframes right {
  @for $i from 0 through $step {
    #{math.div(1, $step) * $i * 100%} {
      @if $i == 0 {
        content: '4';
      } @else if $i == 1 {
        content: '0';
      } @else {
        content: '4';
      }
    }
  }
}

.side:nth-child(5) {
  transform: rotateY(90deg) translateZ(math.div($size, 2));

  &::before {
    transform: rotateZ(-90deg) rotateY(180deg);
    animation: right #{$duration * $step} steps(1) infinite;
  }
}

/* ## left side */
@keyframes left {
  @for $i from 0 through $step {
    #{math.div(1, $step) * $i * 100%} {
      @if $i == 0 {
        content: '4';
      } @else if $i == 1 {
        content: '';
      } @else {
        content: '4';
      }
    }
  }
}

.side:nth-child(6) {
  transform: rotateY(-90deg) translateZ(math.div($size, 2));

  &::before {
    transform: rotateZ(90deg) rotateY(180deg);
    animation: left #{$duration * $step} steps(1) infinite;
  }
}
